/*
 * generated by Xtext 2.33.0
 */
/*
 * Copyright (c) 2022 - 2024 Epistimis LLC (http://www.epistimis.com).
 */
package com.epistimis.face;

import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy;
//import org.eclipse.xtext.scoping.IGlobalScopeProvider;

import com.epistimis.face.scoping.FacePackageProvider;
//import com.epistimis.face.scoping.FaceGlobalScopeProvider;
import com.epistimis.face.scoping.FaceResourceDescriptionsStrategy;
import com.epistimis.face.util.QueryUtilities;
import com.epistimis.face.util.QueryUtilitiesC;
import com.epistimis.face.util.QueryUtilitiesL;
import com.epistimis.face.util.QueryUtilitiesP;
import com.epistimis.uddl.QueryProcessor;
import com.epistimis.uddl.UddlQNP;
import com.epistimis.uddl.uddl.ConceptualCharacteristic;
import com.epistimis.uddl.uddl.ConceptualCompositeQuery;
import com.epistimis.uddl.uddl.ConceptualComposition;
import com.epistimis.uddl.uddl.ConceptualEntity;
import com.epistimis.uddl.uddl.ConceptualParticipant;
import com.epistimis.uddl.uddl.ConceptualQuery;
import com.epistimis.uddl.uddl.ConceptualQueryComposition;
import com.epistimis.uddl.uddl.ConceptualView;
import com.epistimis.uddl.uddl.LogicalCharacteristic;
import com.epistimis.uddl.uddl.LogicalCompositeQuery;
import com.epistimis.uddl.uddl.LogicalComposition;
import com.epistimis.uddl.uddl.LogicalEntity;
import com.epistimis.uddl.uddl.LogicalParticipant;
import com.epistimis.uddl.uddl.LogicalQuery;
import com.epistimis.uddl.uddl.LogicalQueryComposition;
import com.epistimis.uddl.uddl.LogicalView;
import com.epistimis.uddl.uddl.PlatformCharacteristic;
import com.epistimis.uddl.uddl.PlatformCompositeQuery;
import com.epistimis.uddl.uddl.PlatformComposition;
import com.epistimis.uddl.uddl.PlatformEntity;
import com.epistimis.uddl.uddl.PlatformParticipant;
import com.epistimis.uddl.uddl.PlatformQuery;
import com.epistimis.uddl.uddl.PlatformQueryComposition;
import com.epistimis.uddl.uddl.PlatformView;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
public class FaceRuntimeModule extends AbstractFaceRuntimeModule {

	/**
	 * Concept taken from org.eclipse.ocl.examples.pivot.tests.PivotTestCase.java
	 * It appears that the idea is to uniquely identify the plugin. So the question is 
	 * "Where should this identifier be?" 
	 * 
	 * It seemed to me that the RuntimeModule is a [Schelling point](https://en.wikipedia.org/wiki/Focal_point_(game_theory))
	 * 
	 * The value should be the package name. If we can dynamically determine this, so much the better.
	 */
	public static final @NonNull String PLUGIN_ID = "com.epistimis.face";


	public Class<? extends IntegrationContextProcessor> bindIntegrationContextProcessor() {
		return IntegrationContextProcessor.class;
	}

	@Override
	public Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
		return FaceQNP.class;
	}

	/** Enable this if there are performance issues with name resolution. And then look at the strategy to see what should
	 * be excluded from the index
	 * */
	public  Class<? extends IDefaultResourceDescriptionStrategy> bindIDefaultResourceDescriptionStrategy() {
		return FaceResourceDescriptionsStrategy.class;
	}


//	// Enable imports by uncommenting this. The default is to import anything visible in a project
//	// See section 3.3.1,3.3.2 of the Advanced XText Manual PDF 
//	// or https://blogs.itemis.com/en/in-five-minutes-to-transitive-imports-within-a-dsl-with-xtext
//	@Override
//	public
//	Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider() {
//		return FaceGlobalScopeProvider.class;
//	}
	
	// --------  Other providers --------------------------------
	public Class<? extends com.epistimis.uddl.scoping.IPackageProvider> bindIPackageProvider() {
		return FacePackageProvider.class;
	}
	

	/** 
	 * Inject this if you want the additional methods provided by this QNP
	 * @return
	 */
	public Class<? extends UddlQNP> bindUddlQNP() {
		return FaceQNP.class;
	}
	// This return type is more complicated because there is a derived QueryProcessor that must be accounted for in Privacy
	public Class<? extends	QueryUtilities<ConceptualCharacteristic, ConceptualEntity, ConceptualComposition, ConceptualParticipant, ConceptualView, ConceptualQuery, ConceptualCompositeQuery, ConceptualQueryComposition, 
					? extends QueryProcessor<?,ConceptualCharacteristic,ConceptualEntity,?,ConceptualComposition,ConceptualParticipant,
							ConceptualView,ConceptualQuery,ConceptualCompositeQuery,ConceptualQueryComposition,?,?,?>		
						>> 
	bindQueryUtilitiesC() {
		return QueryUtilitiesC.class;
	}
	public Class<? extends	QueryUtilities<LogicalCharacteristic, LogicalEntity, LogicalComposition, LogicalParticipant, LogicalView, LogicalQuery, LogicalCompositeQuery, LogicalQueryComposition, 
			? extends QueryProcessor<?,LogicalCharacteristic,LogicalEntity,?,LogicalComposition,LogicalParticipant,
					LogicalView,LogicalQuery,LogicalCompositeQuery,LogicalQueryComposition,?,?,?>		
				>> 
	bindQueryUtilitiesL() 
	{
		return QueryUtilitiesL.class;
	}
	public Class<? extends	QueryUtilities<PlatformCharacteristic, PlatformEntity, PlatformComposition, PlatformParticipant, PlatformView, PlatformQuery, PlatformCompositeQuery, PlatformQueryComposition, 
			? extends QueryProcessor<?,PlatformCharacteristic,PlatformEntity,?,PlatformComposition,PlatformParticipant,
					PlatformView,PlatformQuery,PlatformCompositeQuery,PlatformQueryComposition,?,?,?>		
				>> 
	bindQueryUtilitiesP() 
	{
		return QueryUtilitiesP.class;
	}

	public Class<? extends TemplProcessor> bindTemplProcessor() {
		return TemplProcessor.class;
	}


}
